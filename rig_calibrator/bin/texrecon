#!/usr/bin/env python

# Copyright (c) 2021, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The "ISAAC - Integrated System for Autonomous and Adaptive Caretaking
# platform" software is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""
A wrapper around the tools that when run together produce a textured mesh.
"""
import argparse, os, re, shutil, subprocess, sys, glob
import numpy as np

# Find and import rig_utils.py
curr_path = os.path.abspath(sys.path[0])
libexec_path = os.path.dirname(curr_path) + "/libexec" # install dir for rig_utils.py
sys.path.insert(0, curr_path)
sys.path.insert(0, libexec_path)
import rig_utils

def process_args(args):
    """
    Set up the parser and parse the args.
    """

    parser = argparse.ArgumentParser(description = "Parameters for texrecon.")
    
    parser.add_argument("--rig_config",  dest="rig_config", default="",
                        help = "Rig configuration file.")
    
    parser.add_argument("--rig_sensor", dest="rig_sensor", default="",
                        help="Which rig sensor images to texture. Must be among the " + \
                        "sensors specified via --rig_config.")

    parser.add_argument("--camera_poses", dest="camera_poses",
                        default="", help= "Read images and camera poses from this list.")

    parser.add_argument("--mesh", dest="mesh",
                        default="", help="The mesh to use for texturing, in .ply format.")

    parser.add_argument("--max_texture_size", dest="max_texture_size",
                        default="2048",
                        help="The maximum size (in pixels) of each texture file created " + \
                        "for the produced textured mesh.")
    
    parser.add_argument("--out_dir", dest="out_dir",
                        default="", help="The directory where to write the textured mesh " + \
                        "and other data.")
    
    # Note how the percent sign below is escaped, by writing: %%
    parser.add_argument("--undistorted_crop_win", dest="undistorted_crop_win", default = "",
                        help = "The dimensions of the central image region to keep after "   + \
                        "undistorting an image and before using it in texturing. Normally "  + \
                        "85%% - 90%% of distorted (actual) image dimensions would do. "      + \
                        "Suggested the Astrobee images: "        + \
                        "sci_cam: '1250 1000' nav_cam: '1100 776'. haz_cam: '250 200'.")
    
    args = parser.parse_args()

    return args

def sanity_checks(args):

    if args.camera_poses == "":
        raise Exception("The path to the list having input images and poses was not specified.")

    if args.mesh == "":
        raise Exception("The mesh to use for texturing was not specified.")

    if args.rig_config == "":
        raise Exception("The path to the rig configuration was not specified.")

    if args.rig_sensor == "":
        raise Exception("The rig sensor to use for texturing was not specified.")

    if args.out_dir == "":
        raise Exception("The path to the output directory was not specified.")

    if args.undistorted_crop_win == "":
        raise Exception("The undistorted crop win was not specified.")

def convert_intrinsics_to_texrecon(undist_intrinsics_file):

    (widx, widy, f, cx, cy) = rig_utils.read_intrinsics(undist_intrinsics_file)

    max_wid = widx
    if widy > max_wid:
        max_wid = widy

    # normalize
    nf = f / max_wid
    ncx = cx / widx
    ncy = cy / widy
    d0 = 0.0
    d1 = 0.0
    paspect = 1.0

    return (nf, d0, d1, paspect, ncx, ncy)

def create_texrecon_cameras(undistorted_images, world_to_cam, nf, d0, d1, paspect, ncx, ncy):
    if len(undistorted_images) != len(world_to_cam):
        raise Exception("Expecting as many images as cameras.")

    for it in range(len(undistorted_images)):
        path, ext = os.path.splitext(undistorted_images[it])
        cam = path + ".cam"

        print("Writing: " + cam)
        with open(cam, "w") as g:
            M = world_to_cam[it]
            # write translation
            g.write("%0.17g %0.17g %0.17g " % (M[0][3], M[1][3], M[2][3]))

            # write rotation
            g.write(
                "%0.17g %0.17g %0.17g %0.17g %0.17g %0.17g %0.17g %0.17g %0.17g\n"
                % (M[0][0], M[0][1], M[0][2], M[1][0], M[1][1], M[1][2],
                   M[2][0], M[2][1], M[2][2]))

            # normalized inrinsics
            g.write("%0.17g %0.17g %0.17g %0.17g %0.17g %0.17g\n"
                % (nf, d0, d1, paspect, ncx, ncy))
    
def run_texrecon(tools_base_dir, undist_dir, mesh, texture_dir):

    # That is one long path
    texrecon_path = tools_base_dir + "/bin/texrecon_bin"
    if not os.path.exists(texrecon_path):
        raise Exception("Cannot find: " + texrecon_path)
    
    rig_utils.mkdir_p(texture_dir)

    cmd = [texrecon_path, undist_dir, mesh, texture_dir,
           "-o", "gauss_clamping",
           "-d", "view_dir_dot_face_dir", # TODO(oalexan1): The -d option needs study
           "--keep_unseen_faces",
           "--max_texture_size=" + str(args.max_texture_size)]

    log_file = os.path.join(texture_dir, "texrecon_log.txt")
    print("Running texrecon.\n")
    rig_utils.run_cmd(cmd)

    textured_mesh = texture_dir + ".obj"

    print("\nWrote: " + textured_mesh)
    
    return textured_mesh

if __name__ == "__main__":

    args = process_args(sys.argv)

    sanity_checks(args)

    rig_utils.mkdir_p(args.out_dir)

    (images, world_to_cam) \
             = rig_utils.parse_images_and_camera_poses(args.camera_poses, args.rig_sensor)
    
    tools_base_dir = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))
    extension = '.jpg' # extension of undistorted images, as preferred by texrecon
    extra_opts = ["--save_bgr"] # create color images
    suff = "_texrecon"
    (undist_intrinsics_file, undistorted_images, undist_dir) \
                        = rig_utils.undistort_images(args, images, tools_base_dir,
                                                     extension, extra_opts, suff)

    (nf, d0, d1, paspect, ncx, ncy) = convert_intrinsics_to_texrecon(undist_intrinsics_file)

    create_texrecon_cameras(undistorted_images, world_to_cam, nf, d0, d1, paspect, ncx, ncy)

    texture_dir = args.out_dir + "/" + args.rig_sensor + "/texture"
    run_texrecon(tools_base_dir, undist_dir, args.mesh, texture_dir)

