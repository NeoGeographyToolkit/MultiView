#!/usr/bin/env python
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""
Documentation is at:
https://stereopipeline.readthedocs.io/en/latest/tools/rig_calibrator.html
"""

import argparse, glob, os, re, shutil, subprocess, sys, platform

# Find and import rig_utils.py
curr_path = os.path.abspath(sys.path[0])
libexec_path = os.path.dirname(curr_path) + "/libexec" # install dir for rig_utils.py
sys.path.insert(0, curr_path)
sys.path.insert(0, libexec_path)
import rig_utils

def sanityChecks(args):

    if args.rig_config == "":
        raise Exception("The path to the rig configuration file was not specified.")

    if args.images == "":
        raise Exception("The input images were not specified.")

    if args.theia_flags == "":
        raise Exception("The path to the Theia flags was not specified.")

    if not os.path.exists(args.theia_flags):
        raise Exception("Cannot find the Theia flags file: " + args.theia_flags)

    if args.out_dir == "":
        raise Exception("The path to the output directory was not specified.")

def processArgs(args, base_dir):
    """
    Set up the parser and parse the args.
    """

    # Number of arguments before starting to parse them
    num_input_args = len(sys.argv)

    parser = argparse.ArgumentParser(description="")
    parser.add_argument("--rig_config",  dest="rig_config", default="",
                        help = "Rig configuration file.")

    parser.add_argument("--images",  dest="images", default="",
                        help = "Images, as individual wildcards. Example: 'dir/cam1/*tif dir/cam2/*tif.")

    parser.add_argument("--theia_flags", dest="theia_flags",
                        default="", help="The flags to pass to Theia. By default, " + \
                        "the file ``share/theia_flags.txt`` in the software "       + \
                        "distribution is used.")

    parser.add_argument("--out_dir", dest="out_dir", default="",
                        help="The output directory (only the 'cameras.nvm' " + \
                        "file in it is needed afterwards).")
    
    args = parser.parse_args()

    # Remove continuation lines in the string (those are convenient
    # for readability in docs)
    args.images = args.images.replace('\\', '')
    args.images = args.images.replace('\n', ' ')
    
    # Set the Theia path if missing
    if args.theia_flags == "":
        args.theia_flags = base_dir + "/share/theia_flags.txt"
    
    # Print the help message if called with no arguments
    if num_input_args <= 1:
        parser.print_help()
        sys.exit(1)

    sanityChecks(args)
    
    return args

def genTheiaCalibFile(rig_config, args):

    # Initialize the datastructure
    images = {}
    extensions = set()

    # Expand all wildcards
    image_array = []
    for image_wildcard in args.images.split():
        image_array += glob.glob(image_wildcard)

    # Parse the images for all cameras
    image_array = sorted(image_array)
    for image in image_array:
        sensor_name = os.path.basename(os.path.dirname(image))
        if sensor_name not in images:
            images[sensor_name] = []
        images[sensor_name].append(image)
        ext = rig_utils.imageExtension(images[sensor_name])
        extensions.add(ext)
    
    if len(extensions) > 1:
        raise Exception("Input images have a mix of filename extensions. Use just one.")
    if len(extensions) == 0:
        raise Exception("The input image set is invalid.")
    extension = list(extensions)[0]

    print("Output directory: " + args.out_dir)    
    rig_utils.mkdir_p(args.out_dir)

    # Remove old images in sym_image_dir
    sym_image_dir = args.out_dir + "/images"
    old_images = glob.glob(sym_image_dir + "/*")
    if len(old_images) > 0:
        print("Removing old images from " + sym_image_dir)
        for image in old_images:
            os.remove(image)

    # Theia likes all images in the same dir, so do it with sym links
    print("Creating sym links to the input images in: " + sym_image_dir)
    rig_utils.mkdir_p(sym_image_dir)
    sym_images = {}
    for sensor_id in range(len(rig_config)):
        sensor_name = rig_config[sensor_id]['sensor_name']
        sym_images[sensor_name] = []
        num_images = len(images[sensor_name])
        timestamps = set() # timestamps for given sensor
        for it in range(num_images):
            image = images[sensor_name][it]

            # Sanity check. Each image file name must be /path/to/<timestamp>.extension.
            # Also check if the timestamp is unique.
            src_file = os.path.relpath(image, sym_image_dir)
            base_file = os.path.basename(image)
            timestamp = os.path.splitext(base_file)[0]
            try:
                timestamp = float(timestamp)
            except:
                raise Exception("Cannot extract timestamp from image name: " + image)
            
            if timestamp in timestamps:
                raise Exception("Found duplicate timestamp " + str(timestamp) + \
                                ". Offending image: " + image)
            timestamps.add(timestamp)
            
            cam_type = os.path.basename(os.path.dirname(image))
            dst_file = sym_image_dir + "/" + cam_type + "_" + os.path.basename(image)
            
            sym_images[sensor_name].append(dst_file)
            os.symlink(src_file, dst_file)
    
    calib_file = args.out_dir + "/" + "theia_calibration.json"
    print("Writing Theia calibration file: " + calib_file)
    with open(calib_file, "w") as fh:
        fh.write("{\n")
        fh.write('"priors" : [\n')

        for sensor_id in range(len(rig_config)):
            sensor_name = rig_config[sensor_id]['sensor_name']
            num_images = len(sym_images[sensor_name])
            for it in range(num_images):
                image = os.path.basename(sym_images[sensor_name][it])
                fh.write('{"CameraIntrinsicsPrior" : {\n')
                fh.write('"image_name" : "' + image + '",\n')
                fh.write('"width" : '  + rig_config[sensor_id]['image_size'][0] + ",\n")
                fh.write('"height" : ' + rig_config[sensor_id]['image_size'][1] + ",\n")
                fh.write('"focal_length" : ' + rig_config[sensor_id]["focal_length"] + ",\n")
                fh.write('"principal_point" : [' + \
                         rig_config[sensor_id]["optical_center"][0] + ", " + \
                         rig_config[sensor_id]["optical_center"][1] + "],\n")

                if rig_config[sensor_id]['distortion_type'] == 'no_distortion':
                    fh.write('"camera_intrinsics_type" : "PINHOLE"\n')
                elif rig_config[sensor_id]['distortion_type'] == 'fisheye':
                    fh.write('"radial_distortion_1" : ' + \
                             rig_config[sensor_id]["distortion_coeffs"][0] + ",\n")
                    fh.write('"camera_intrinsics_type" : "FOV"\n')
                elif rig_config[sensor_id]['distortion_type'] == 'radtan':
                    
                    # Distortion coeffs convention copied from
                    # camera_params.cc. JSON format from
                    # calibration_test.json in TheiaSFM.
                    k1 = rig_config[sensor_id]["distortion_coeffs"][0]
                    k2 = rig_config[sensor_id]["distortion_coeffs"][1]
                    p1 = rig_config[sensor_id]["distortion_coeffs"][2]
                    p2 = rig_config[sensor_id]["distortion_coeffs"][3]
                    k3 = '0'
                    if len(rig_config[sensor_id]["distortion_coeffs"]) == 5:
                        k3 = rig_config[sensor_id]["distortion_coeffs"][4]
                    fh.write('"radial_distortion_coeffs" : [' + \
                             k1 + ", " + k2 + ", " + k3 + "],\n")
                    fh.write('"tangential_distortion_coeffs" : [' + \
                             p1 + ", " + p2 + "],\n")
                    fh.write('"camera_intrinsics_type" : "PINHOLE_RADIAL_TANGENTIAL"\n')
                else:
                    raise Exception("Unknown distortion type: " + \
                                    rig_config[sensor_id]['distortion_type'])

                if it < num_images - 1 or sensor_id < len(rig_config)  - 1:
                    fh.write("}},\n")
                else:
                    fh.write("}}\n")

        fh.write("]\n")
        fh.write("}\n")

    return (calib_file, sym_image_dir, images, sym_images, extension)

def put_orig_images(nvm_file, final_nvm_file,
                    offset_file, final_offset_file,
                    images, sym_images):
    """
    Theia saves images without full path. Go back to original image names in the nvm
    and offset files.
    """
    # Make a dict for quick lookup
    image_dict = {}
    for key in images:
        for i in range(len(images[key])):
            image_dict[os.path.basename(sym_images[key][i])] = images[key][i]

    in_files = [nvm_file, offset_file]
    out_files = [final_nvm_file, final_offset_file]

    for file_it in range(2):
        lines = []
        with open(in_files[file_it], 'r') as fh:
            lines = fh.readlines()

        for line_it in range(len(lines)):
            vals = lines[line_it].split()
            if len(vals) > 0 and vals[0] in image_dict:
                vals[0] = image_dict[vals[0]]
                lines[line_it] = " ".join(vals) + "\n"

        print("Writing file with original image names: " + out_files[file_it])
        with open(out_files[file_it], 'w') as fh:
            fh.writelines(lines)
    
if __name__ == "__main__":

    # The directory having as subdirs bin, lib, etc. 
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))

    # Set the path to OpenIO. This will not be needed when this dependency is removed
    os.environ['OIIO_LIBRARY_PATH'] = base_dir + "/lib"

    # TODO(oalexan1): Setting the dynamic library path this way is fragile, but
    # I can't think of any better solution, and otherwise it fails to find the lib.
    if 'Darwin' in platform.system():
        key = 'DYLD_LIBRARY_PATH'
        if key not in os.environ:
            os.environ[key] = base_dir + '/lib'
        else:
            os.environ[key] = base_dir + '/lib' + ':' + os.environ[key]
    
    args = processArgs(sys.argv, base_dir)

    rig_config = rig_utils.parseRigConfig(args.rig_config)

    (calib_file, sym_image_dir, images, sym_images, image_extension) \
                 = genTheiaCalibFile(rig_config, args)

    reconstruction_file = args.out_dir + "/reconstruction"
    matching_dir = args.out_dir + "/matches"

    # Wipe old data
    for old_reconstruction in glob.glob(reconstruction_file + "*"):
        print("Deleting old reconstruction: " + old_reconstruction)
        os.remove(old_reconstruction)

    count = 0
    for old_matches in glob.glob(matching_dir + "/*"):
        if count == 0:
            print("Wiping old matches in: " + matching_dir)
        count += 1
        os.remove(old_matches)

    cmd = [base_dir + "/bin/build_reconstruction", "--flagfile", args.theia_flags, "--images",
           sym_image_dir + "/*" + image_extension, "--calibration_file", calib_file,
           "--output_reconstruction", reconstruction_file, "--matching_working_directory",
           matching_dir, "--intrinsics_to_optimize", "NONE"]
    rig_utils.run_cmd(cmd)
    
    nvm_file = reconstruction_file + ".nvm"
    cmd = [base_dir + "/bin/export_to_nvm_file", "-input_reconstruction_file",
           reconstruction_file + "-0", "-output_nvm_file", nvm_file]
    rig_utils.run_cmd(cmd)

    final_nvm_file = args.out_dir + "/cameras.nvm"

    offset_file = reconstruction_file + "_offsets.txt";
    final_offset_file = args.out_dir + "/cameras_offsets.txt";
    
    put_orig_images(nvm_file, final_nvm_file, offset_file, final_offset_file, images, sym_images)
    
